package RangeIteratorDemo.dataFlow;

/*Generated by MPS */

import jetbrains.mps.lang.dataFlow.DataFlowBuilder;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.lang.dataFlow.DataFlowBuilderContext;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;

public class RangeIterator_DataFlow extends DataFlowBuilder {
  public RangeIterator_DataFlow() {
  }

  public void build(final IOperationContext operationContext, final DataFlowBuilderContext _context) {
    _context.getBuilder().build((SNode) SLinkOperations.getTarget(_context.getNode(), "lowerBoundary", true));
    _context.getBuilder().emitWrite(SLinkOperations.getTarget(_context.getNode(), "loopVariable", true), SLinkOperations.getTarget(_context.getNode(), "lowerBoundary", true));
    _context.getBuilder().emitLabel("startIteration");
    _context.getBuilder().build((SNode) SLinkOperations.getTarget(_context.getNode(), "upperBoundary", true));
    if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "lowerBoundary", true), "jetbrains.mps.baseLanguage.structure.IntegerConstant") && SNodeOperations.isInstanceOf(SLinkOperations.getTarget(_context.getNode(), "upperBoundary", true), "jetbrains.mps.baseLanguage.structure.IntegerConstant")) {
      int start = SPropertyOperations.getInteger(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "lowerBoundary", true), "jetbrains.mps.baseLanguage.structure.IntegerConstant"), "value");
      int end = SPropertyOperations.getInteger(SNodeOperations.cast(SLinkOperations.getTarget(_context.getNode(), "upperBoundary", true), "jetbrains.mps.baseLanguage.structure.IntegerConstant"), "value");
      if (start >= end) {
        _context.getBuilder().emitJump(_context.getBuilder().after(_context.getNode()));
      }
    }
    _context.getBuilder().emitIfJump(_context.getBuilder().after(_context.getNode()));
    _context.getBuilder().build((SNode) SLinkOperations.getTarget(_context.getNode(), "body", true));
    _context.getBuilder().emitJump(_context.getBuilder().label(_context.getNode(), "startIteration"));
  }
}
