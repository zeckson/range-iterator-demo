package RangeIteratorDemo.typesystem;

/*Generated by MPS */

import jetbrains.mps.lang.typesystem.runtime.AbstractNonTypesystemRule_Runtime;
import jetbrains.mps.lang.typesystem.runtime.NonTypesystemRule_Runtime;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.typesystem.inference.TypeCheckingContext;
import jetbrains.mps.lang.typesystem.runtime.IsApplicableStatus;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.errors.messageTargets.MessageTarget;
import jetbrains.mps.errors.messageTargets.NodeMessageTarget;
import jetbrains.mps.errors.IErrorReporter;
import jetbrains.mps.smodel.SModelUtil_new;

public class check_RangeIterator_NonTypesystemRule extends AbstractNonTypesystemRule_Runtime implements NonTypesystemRule_Runtime {
  public check_RangeIterator_NonTypesystemRule() {
  }

  public void applyRule(final SNode rangeIterator, final TypeCheckingContext typeCheckingContext, IsApplicableStatus status) {
    for (SNode statement : ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(rangeIterator, "body", true), "statement", true)).where(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, "jetbrains.mps.baseLanguage.structure.ExpressionStatement");
      }
    })) {
      SNode varRefExpression = null;

      SNode expression = SLinkOperations.getTarget(SNodeOperations.cast(statement, "jetbrains.mps.baseLanguage.structure.ExpressionStatement"), "expression", true);
      if (SNodeOperations.isInstanceOf(expression, "jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression")) {
        varRefExpression = SLinkOperations.getTarget(SNodeOperations.cast(expression, "jetbrains.mps.baseLanguage.structure.BaseAssignmentExpression"), "lValue", true);
      } else if (SNodeOperations.isInstanceOf(expression, "jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation")) {
        varRefExpression = SLinkOperations.getTarget(SNodeOperations.cast(expression, "jetbrains.mps.baseLanguage.structure.AbstractUnaryNumberOperation"), "expression", true);
      }

      if (SNodeOperations.isInstanceOf(varRefExpression, "jetbrains.mps.baseLanguage.structure.VariableReference")) {
        SNode variableDeclaration = SLinkOperations.getTarget(SNodeOperations.cast(varRefExpression, "jetbrains.mps.baseLanguage.structure.VariableReference"), "variableDeclaration", false);
        if (SNodeOperations.isInstanceOf(variableDeclaration, "RangeIteratorDemo.structure.RangeIteratorVariable")) {
          {
            MessageTarget errorTarget = new NodeMessageTarget();
            IErrorReporter _reporter_2309309498 = typeCheckingContext.reportTypeError(expression, "Cannot assign value to read-only range iterator variable", "r:37470741-7f3e-4ca1-94cb-47b99a04bdd1(RangeIteratorDemo.typesystem)", "6551380723246023785", null, errorTarget);
          }
        }
      }

    }
  }

  public String getApplicableConceptFQName() {
    return "RangeIteratorDemo.structure.RangeIterator";
  }

  public IsApplicableStatus isApplicableAndPattern(SNode argument) {
    {
      boolean b = SModelUtil_new.isAssignableConcept(argument.getConcept().getConceptId(), this.getApplicableConceptFQName());
      return new IsApplicableStatus(b, null);
    }
  }

  public boolean overrides() {
    return false;
  }
}
